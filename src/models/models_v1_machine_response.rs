/*
 * cloud-api
 *
 * Resource for managing cloud entities
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: devops@f-i-ts.de
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModelsV1MachineResponse {
    #[serde(rename = "allocation", skip_serializing_if = "Option::is_none")]
    pub allocation: Option<Box<crate::models::ModelsV1MachineAllocation>>,
    #[serde(rename = "bios")]
    pub bios: Box<crate::models::ModelsV1MachineBios>,
    #[serde(rename = "changed", skip_serializing_if = "Option::is_none")]
    pub changed: Option<String>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "events")]
    pub events: Box<crate::models::ModelsV1MachineRecentProvisioningEvents>,
    #[serde(rename = "hardware")]
    pub hardware: Box<crate::models::ModelsV1MachineHardware>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "ledstate")]
    pub ledstate: Box<crate::models::ModelsV1ChassisIdentifyLedState>,
    #[serde(rename = "liveliness")]
    pub liveliness: String,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "partition", skip_serializing_if = "Option::is_none")]
    pub partition: Option<Box<crate::models::ModelsV1PartitionResponse>>,
    #[serde(rename = "rackid", skip_serializing_if = "Option::is_none")]
    pub rackid: Option<String>,
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<Box<crate::models::ModelsV1SizeResponse>>,
    #[serde(rename = "state")]
    pub state: Box<crate::models::ModelsV1MachineState>,
    #[serde(rename = "tags")]
    pub tags: Vec<String>,
}

impl ModelsV1MachineResponse {
    pub fn new(bios: crate::models::ModelsV1MachineBios, events: crate::models::ModelsV1MachineRecentProvisioningEvents, hardware: crate::models::ModelsV1MachineHardware, id: String, ledstate: crate::models::ModelsV1ChassisIdentifyLedState, liveliness: String, state: crate::models::ModelsV1MachineState, tags: Vec<String>) -> ModelsV1MachineResponse {
        ModelsV1MachineResponse {
            allocation: None,
            bios: Box::new(bios),
            changed: None,
            created: None,
            description: None,
            events: Box::new(events),
            hardware: Box::new(hardware),
            id,
            ledstate: Box::new(ledstate),
            liveliness,
            name: None,
            partition: None,
            rackid: None,
            size: None,
            state: Box::new(state),
            tags,
        }
    }
}


